/*jslint devel: true, node: true, vars: true *//** * Module dependencies. *//*var program = require('commander');program  .version('0.0.1')  .option('-p, --peppers', 'Add peppers')  .option('-P, --pineapple', 'Add pineapple')  .option('-b, --bbq', 'Add bbq sauce')  .option('-c, --cheese [type]', 'Add the specified type of cheese [marble]', 'marble')  .parse(process.argv);console.log('you ordered a pizza with:');if (program.peppers) {    console.log('  - peppers');}if (program.pineapple) {    console.log('  - pineapple');}if (program.bbq) {    console.log('  - bbq');}console.log('  - %s cheese', program.cheese);*/"use strict";var FTP_BASE_PATH = 'ftp://ftp.wakanda.org/';var HTTP_BASE_PATH = 'http://download.wakanda.org/';var CURRENT_PATH = 'current path';var LAST_MAJOR_VERSION_XPATH = '//tbody/tr[position() = last() - 1]/td[2]/a/text()';var inquirer = require("inquirer");var fs = require("fs");var os = require('os');var http = require('http');var Ftp = require('jsftp');var xpath = require('xpath')var dom = require('xmldom').DOMParservar username = process.env.USER;var questions = [];var useFTP = false;var verboseMode = true;var osKind = (function getOsFolder(platform) {    switch (platform) {    case 'win32':        return 'Windows';    case 'win64':        return 'Windows';    case 'darwin':        return 'Mac';    default:        return 'Linux';    }}(os.platform()));var CHANNEL_DIR_NAMES = {    stable: 'ProductionChannel/',    beta: 'StabilizationChannel/',    dev: 'DevelopmentChannel/'};var serverPaths = ({    win32: ['C:\\\\Program Files\\Wakanda Server\\'],    win64: ['C:\\\\Program Files\\Wakanda Server\\'],    darwin: [        '/User/' + username + '/Applications/Wakanda Server/',        '/usr/bin/wakanda/'    ],    linux: ['/usr/bin/wakanda/']})[os.platform()];var serverPath;console.log("Hi, welcome to NPM Wakanda");var verbose = {log: function log() {    if (verboseMode) {        console.log.apply(console, arguments);    }}};function fetch(remoteAddress, localPath, fileName, callback) {    var ftpClient, localFile, httpRequest;    verbose.log('fetch:', remoteAddress, localPath, fileName);    remoteAddress = remoteAddress + fileName;    localPath = localPath + fileName;    if (useFTP) {        ftpClient = new Ftp({host: FTP_BASE_PATH});        ftpClient.get(remoteAddress, localPath, function ftpFetchEnd(ftpData) {            ftpClient.end();            callback({ftp: ftpData});        });    } else {        verbose.log('fetch HTTP');        localFile = fs.createWriteStream(            localPath,            {                flags: 'w',                mode: parseInt('0666', 8)            }        );        httpRequest = http.get(HTTP_BASE_PATH + remoteAddress, function httpFetch(response) {            verbose.log('http get:', HTTP_BASE_PATH + remoteAddress);            response.pipe(localFile);        });        httpRequest.on('error', function (err, data) {            verbose.log('http error', err, data);        });        httpRequest.on('end', function (err, data) {            verbose.log('http end', err, data);        });        localFile.on('end', function (err, data) {            verbose.log('pipe end', err, data);        });    }}function isValidWakandaVersion(version) {    return true;}function getLatestBuildNumber(channel, majorVersion, callback) {    var url, html, doc, buildNumber;    url = HTTP_BASE_PATH + CHANNEL_DIR_NAMES[channel];    url += versionDirName + 'Wakanda' + (entreprise ? '-Entreprise' : '') + '/' + osKind + '/';    html = '';    http.get(url, function (response) {        response.on('data', function (data) {            html += data;        });        response.on('end', function () {            doc = new dom().parseFromString(html)            var buildDirName = xpath.select(LAST_MAJOR_VERSION_XPATH, doc).toString();            buildNumber = buildDirName.substr(0, buildDirName.length - 2);            callback(buildNumber);        });    });}function findLatestVersion(channel, callback) {    var url, html, doc, majorVersion;    url = HTTP_BASE_PATH + CHANNEL_DIR_NAMES[channel];    html = '';    http.get(url, function (response) {        response.on('data', function (data) {            html += data;        });        response.on('end', function () {            var versionDirName;            console.log(html);            doc = new dom().parseFromString(html);            versionDirName = xpath.select(LAST_MAJOR_VERSION_XPATH, doc).toString();            console.log(versionDirName);            majorVersion = parseInt(versionDirName, 10);            console.log(majorVersion);            getLastestBuildNumber(channel, majorVersion, function (buildNumber) {                callback(majorVersion, buildNumber) ;            });        });    });    return version;}function installWakanda(data, callback) {    var splitVersion, remoteAddress, fileName;    var enterprise = false;    if (data.versionChoice === 'last') {        data.version = findLatestVersion(data.channel);    }    splitVersion = data.version.split('.');    data.majorVersion = splitVersion[0];    data.buildNumber = splitVersion[1] || findLastestWakandaVersion(data.channel, data.majorVersion);    console.log('expected version:', data.majorVersion, data.buildNumber);    remoteAddress = [        ({            dev: 'DevChannel',            beta: 'StabilizationChannel',            stable: 'ProductionChannel'        })[data.channel],        'v' + data.majorVersion,        'Wakanda' + (enterprise ? '-Enterprise' : ''),        osKind,        data.buildNumber,        ''    ].join('/');    console.log('expected remoteAddress:', remoteAddress);    switch (os.platform()) {    case 'win32':        fileName = 'Wakanda-Server.zip';        break;    case 'win64':        fileName = 'Wakanda-Server' + (data.osArch = 'x64' ? '-x64' : '') + '.zip';        break;    case 'darwin':        fileName = 'Wakanda-Server-x64.zip';        break;    default: // Linux        fileName = [            'wakanda_',            data.majorVersion + '.0',            '-' + data.buildNumber + '_',            (data.osArch = 'x64' ? 'amd64' : 'i386'),            '.tgz' // may otherwize use the .deb version        ].join('');    }    console.log('expected fileName:', fileName);    if (data.localPath === CURRENT_PATH) {        data.localPath = process.cwd() + '/';    }    fetch(remoteAddress, data.customLocalPath || data.localPath, fileName, callback);}// Check Wakanda installation in default directoriesvar serverInstalled = serverPaths.some(function checkServerPath(path) {    // experimental: raw check of path validity    // todo: check version/build and checksum validity    if (fs.existsSync(path)) {        console.log('Wakanda Server found at "' + path +'"');        serverPath = path;        return true;    }    });if (!serverInstalled) {    console.log('Wakanda Server not found on local disk');    questions.push({ // install wakanda        type: "confirm",        name: "installWakanda",        message: "Do you want to download Wakanda Server",        'default': true    }, { // 32 or 64bits        when: function (answers) {            return answers.installWakanda;        },        type: "list",        name: "osArch",        message: "What architecture version do you want (" + os.arch() + " detected)",        choices: [ "x32", "x64"],        'default': os.arch()    }, { // channel        when: function (answers) {            return answers.installWakanda;        },        type: "list",        name: "channel",        message: "From which channel do you want to install Wakanda?",        choices: [            {                name: 'Production (recommended)',                value: 'stable'            },            {                name: 'Stabilization',                value: 'beta'            },            {                name: 'Development',                value: 'dev'            }        ],        'default': 'stable'    }, { // versionChoice        when: function (answers) {            return answers.installWakanda;        },        type: "list",        name: "versionChoice",        message: "What wakanda version do you want",        choices: [            {                name: 'last version',                value: 'last'            },            {                name: 'a specific version',                value: 'other'            }        ],        'default': 'last'    }, { // version        when: function (answers) {            return answers.installWakanda && answers.versionChoice === 'other';        },        type: "input",        name: "version",        message: "What wakanda version do you want",        validate: isValidWakandaVersion    }, { // local server path        when: function (answers) {            return answers.installWakanda;        },        type: "list",        name: "localPath",        message: "Where do you want to install it",        choices: serverPaths.concat(CURRENT_PATH, 'custom'),        'default': serverPaths[0],        validate: function (value) {            installWakanda(answers, this.async());        }    }, { // custom local server path        when: function (answers) {            return answers.installWakanda && answers.localPath === 'custom';        },        type: "input",        name: "customLocalPath",        message: "Enter your custom path:"    });}inquirer.prompt( questions, function( answers ) {  console.log( JSON.stringify(answers, null, "  ") );    if (answers.installWakanda) {        console.log('ask for install ok');        installWakanda(answers, function (err, data) {            err && console.error('Errors', err);            console.log('wakanda downloaded', data);        })    }});